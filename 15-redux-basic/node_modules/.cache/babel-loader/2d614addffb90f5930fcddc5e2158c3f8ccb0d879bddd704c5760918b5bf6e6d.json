{"ast":null,"code":"// import { createStore } from \"redux\"; \nimport { configureStore } from \"@reduxjs/toolkit\"; // 여러개의 reducer를 하나의 reducer로\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    //reducer에서 조건문 쓸 필요 없음\n    increment(state) {\n      state.counter.counter++; // 실제 state 조작하는 것처럼 보이지만, 내부에서 새로운 state 리턴해줌\n    },\n\n    decrement(state) {\n      state.counter.counter--;\n    },\n    increase(state, action) {\n      state.counter.counter = state.counter.counter + action.payload;\n    },\n    toggle(state) {\n      state.counter.showCounter = !state.counter.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\nconst store = configureStore({\n  // reducer: counterSlice.reducer\n  reducer: {\n    // slice 여러개일 때 mapping하는 방식\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport default store;\nexport const counterActions = counterSlice.actions;\n// {type: 액션마다 다른 고유 식별자} 형식의 action 객체 생성\n// 고유 식별자 생성, 오타 고민할 필요 없음!!\nexport const authActions = authSlice.actions;","map":{"version":3,"names":["configureStore","createSlice","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggle","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"sources":["/Users/seojuyeon/Desktop/React Guide/15-redux-basic/src/store/index.js"],"sourcesContent":["// import { createStore } from \"redux\"; \nimport { configureStore } from \"@reduxjs/toolkit\"; // 여러개의 reducer를 하나의 reducer로\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true,\n};\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: { //reducer에서 조건문 쓸 필요 없음\n    increment(state) {\n      state.counter.counter++; // 실제 state 조작하는 것처럼 보이지만, 내부에서 새로운 state 리턴해줌\n    },\n    decrement(state) {\n      state.counter.counter--;\n    },\n    increase(state, action) {\n      state.counter.counter = state.counter.counter + action.payload\n    },\n    toggle(state) {\n      state.counter.showCounter = !state.counter.showCounter;\n    }\n  },\n});\n\nconst initialAuthState = {\n  isAuthenticated: false,\n};\n\nconst authSlice = createSlice({\n  name:'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    },\n  }\n})\n\n\nconst store = configureStore({\n  // reducer: counterSlice.reducer\n  reducer: { // slice 여러개일 때 mapping하는 방식\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer,\n  }\n});\n\nexport default store;\n\nexport const counterActions = counterSlice.actions;\n// {type: 액션마다 다른 고유 식별자} 형식의 action 객체 생성\n// 고유 식별자 생성, 오타 고민할 필요 없음!!\nexport const authActions = authSlice.actions;"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,kBAAkB,CAAC,CAAC;AACnD,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,mBAAmB,GAAG;EAC1BC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IAAE;IACVC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,CAACA,OAAO,EAAE,CAAC,CAAC;IAC3B,CAAC;;IACDQ,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,CAACA,OAAO,EAAE;IACzB,CAAC;IACDS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACP,OAAO,CAACA,OAAO,GAAGO,KAAK,CAACP,OAAO,CAACA,OAAO,GAAGU,MAAM,CAACC,OAAO;IAChE,CAAC;IACDC,MAAMA,CAACL,KAAK,EAAE;MACZA,KAAK,CAACP,OAAO,CAACC,WAAW,GAAG,CAACM,KAAK,CAACP,OAAO,CAACC,WAAW;IACxD;EACF;AACF,CAAC,CAAC;AAEF,MAAMY,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AACnB,CAAC;AAED,MAAMC,SAAS,GAAGjB,WAAW,CAAC;EAC5BK,IAAI,EAAC,gBAAgB;EACrBC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAE;IACRW,KAAKA,CAACT,KAAK,EAAE;MACXA,KAAK,CAACO,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDG,MAAMA,CAACV,KAAK,EAAE;MACZA,KAAK,CAACO,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;AAGF,MAAMI,KAAK,GAAGrB,cAAc,CAAC;EAC3B;EACAsB,OAAO,EAAE;IAAE;IACTnB,OAAO,EAAEE,YAAY,CAACiB,OAAO;IAC7BC,IAAI,EAAEL,SAAS,CAACI;EAClB;AACF,CAAC,CAAC;AAEF,eAAeD,KAAK;AAEpB,OAAO,MAAMG,cAAc,GAAGnB,YAAY,CAACoB,OAAO;AAClD;AACA;AACA,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}