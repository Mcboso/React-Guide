{"ast":null,"code":"// import { createStore } from \"redux\"; \nimport { configureStore } from \"@reduxjs/toolkit\"; // 여러개의 reducer를 하나의 reducer로\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    //reducer에서 조건문 쓸 필요 없음\n    increment(state) {\n      state.counter++; // 실제 state 조작하는 것처럼 보이지만, 내부에서 새로운 state 리턴해줌\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.counter = !state.counter;\n    }\n  }\n});\ncounterSlice.actions.toggleCounter;\n// {type: 액션마다 다른 고유 식별자} 형식의 action 객체 생성\n// 고유 식별자 생성, 오타 고민할 필요 없음!!\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n  // reducer: { // slice 여러개일 때 mapping하는 방식\n  //   counter: counterSlice.reducer,\n  // }\n});\n\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","actions","store","reducer"],"sources":["/Users/seojuyeon/Desktop/React Guide/15-redux-basic/src/store/index.js"],"sourcesContent":["// import { createStore } from \"redux\"; \nimport { configureStore } from \"@reduxjs/toolkit\"; // 여러개의 reducer를 하나의 reducer로\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  counter: 0,\n  showCounter: true,\n};\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: { //reducer에서 조건문 쓸 필요 없음\n    increment(state) {\n      state.counter++; // 실제 state 조작하는 것처럼 보이지만, 내부에서 새로운 state 리턴해줌\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.counter = !state.counter;\n    }\n  },\n});\n\ncounterSlice.actions.toggleCounter \n// {type: 액션마다 다른 고유 식별자} 형식의 action 객체 생성\n// 고유 식별자 생성, 오타 고민할 필요 없음!!\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n  // reducer: { // slice 여러개일 때 mapping하는 방식\n  //   counter: counterSlice.reducer,\n  // }\n});\n\nexport default store;"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,kBAAkB,CAAC,CAAC;AACnD,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IAAE;IACVC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE,CAAC,CAAC;IACnB,CAAC;;IACDO,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;IAC/C,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACN,OAAO,GAAG,CAACM,KAAK,CAACN,OAAO;IAChC;EACF;AACF,CAAC,CAAC;AAEFE,YAAY,CAACU,OAAO,CAACD,aAAa;AAClC;AACA;;AAEA,MAAME,KAAK,GAAGhB,cAAc,CAAC;EAC3BiB,OAAO,EAAEZ,YAAY,CAACY;EACtB;EACA;EACA;AACF,CAAC,CAAC;;AAEF,eAAeD,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}