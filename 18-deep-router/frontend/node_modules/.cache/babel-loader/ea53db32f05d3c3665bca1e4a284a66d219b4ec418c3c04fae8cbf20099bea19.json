{"ast":null,"code":"var _jsxFileName = \"/Users/seojuyeon/Desktop/React Guide/18-deep-router/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { Suspense } from \"react\";\nimport EventsList from \"../components/EventsList\";\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 25\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({ message: \"could not fetch events\" }), {\n    //   status: 500,\n    // Response 직접 생성하기 귀찮음 => json() 리턴 (json 형식의 데이터 포함하는 response 객체 리턴)\n    return json({\n      message: \"could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events; // return하면 렌더링되고있는 페이지에 제공\n    // return response; // response 를 return 가능 (defer 사용시에는 사용 불가능)\n  }\n}\nexport function loader() {\n  // defer을 통해 데이터 가져오기를 연기\n  return defer({\n    // 모든 http 요청을 객체 안에 넣어줌\n    events: loadEvents() // async 함수이기에 promise 리턴\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Suspense","EventsList","useLoaderData","json","defer","Await","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["/Users/seojuyeon/Desktop/React Guide/18-deep-router/frontend/src/pages/Events.js"],"sourcesContent":["import { Suspense } from \"react\";\nimport EventsList from \"../components/EventsList\";\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n  return (\n    <Suspense fallback={<p style={{textAlign: 'center'}}>loading...</p>}>\n      <Await resolve={events}>\n        {/* promise를 resolve 값으로, promise가 resolve될 때까지 기다림 */}\n        {(loadedEvents) => <EventsList events={loadedEvents} />}\n        {/* data 도착하면 실행할 함수 */}\n      </Await>\n    </Suspense>\n  );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({ message: \"could not fetch events\" }), {\n    //   status: 500,\n    // Response 직접 생성하기 귀찮음 => json() 리턴 (json 형식의 데이터 포함하는 response 객체 리턴)\n    return json({ message: \"could not fetch events\" }, { status: 500 });\n  } else {\n    const resData = await response.json();\n    return resData.events; // return하면 렌더링되고있는 페이지에 제공\n    // return response; // response 를 return 가능 (defer 사용시에는 사용 불가능)\n\n  }\n}\n\nexport function loader() {\n  // defer을 통해 데이터 가져오기를 연기\n  return defer({\n    // 모든 http 요청을 객체 안에 넣어줌\n    events: loadEvents(), // async 함수이기에 promise 리턴\n  });\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErE,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGR,aAAa,CAAC,CAAC;EAClC,oBACEK,OAAA,CAACP,QAAQ;IAACW,QAAQ,eAAEJ,OAAA;MAAGK,KAAK,EAAE;QAACC,SAAS,EAAE;MAAQ,CAAE;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,eAClEP,OAAA,CAACF,KAAK;MAACc,OAAO,EAAET,MAAO;MAAAI,QAAA,EAEnBM,YAAY,iBAAKb,OAAA,CAACN,UAAU;QAACS,MAAM,EAAEU;MAAa;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAElD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEf;AAACT,EAAA,CAXQD,UAAU;EAAA,QACEN,aAAa;AAAA;AAAAmB,EAAA,GADzBb,UAAU;AAanB,eAAeA,UAAU;AAEzB,eAAec,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA,OAAOtB,IAAI,CAAC;MAAEuB,OAAO,EAAE;IAAyB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACpB,IAAI,CAAC,CAAC;IACrC,OAAOyB,OAAO,CAAClB,MAAM,CAAC,CAAC;IACvB;EAEF;AACF;AAEA,OAAO,SAASmB,MAAMA,CAAA,EAAG;EACvB;EACA,OAAOzB,KAAK,CAAC;IACX;IACAM,MAAM,EAAEY,UAAU,CAAC,CAAC,CAAE;EACxB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}