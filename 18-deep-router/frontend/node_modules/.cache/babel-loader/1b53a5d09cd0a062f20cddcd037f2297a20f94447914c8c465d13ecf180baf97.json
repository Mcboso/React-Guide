{"ast":null,"code":"var _s = $RefreshSig$();\nimport EventsList from \"../components/EventsList\";\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  return;\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({ message: \"could not fetch events\" }), {\n    //   status: 500,\n    // Response 직접 생성하기 귀찮음 => json() 리턴 (json 형식의 데이터 포함하는 response 객체 리턴)\n    return json({\n      message: \"could not fetch events\"\n    }, {\n      status: 500\n    });\n  } else {\n    // const resData = await response.json();\n    // return resData.events; // return하면 렌더링되고있는 페이지에 제공\n    return response; // response 를 return 가능\n  }\n}\nexport function loader() {\n  // defer을 통해 데이터 가져오기를 연기\n  return defer({\n    // 모든 http 요청을 객체 안에 넣어줌\n    events: loadEvents() // async 함수이기에 promise 리턴\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","useLoaderData","json","defer","Await","EventsPage","_s","data","_c","loadEvents","response","fetch","ok","message","status","loader","events","$RefreshReg$"],"sources":["/Users/seojuyeon/Desktop/React Guide/18-deep-router/frontend/src/pages/Events.js"],"sourcesContent":["import EventsList from \"../components/EventsList\";\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\n\nfunction EventsPage() {\n  const data = useLoaderData();\n  return \n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({ message: \"could not fetch events\" }), {\n    //   status: 500,\n    // Response 직접 생성하기 귀찮음 => json() 리턴 (json 형식의 데이터 포함하는 response 객체 리턴)\n    return json({ message: \"could not fetch events\" }, { status: 500 });\n  } else {\n    // const resData = await response.json();\n    // return resData.events; // return하면 렌더링되고있는 페이지에 제공\n    return response; // response 를 return 가능\n  }\n}\n\nexport function loader() { // defer을 통해 데이터 가져오기를 연기\n  return defer({ // 모든 http 요청을 객체 안에 넣어줌\n    events: loadEvents(), // async 함수이기에 promise 리턴\n  });\n}\n"],"mappings":";AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGN,aAAa,CAAC,CAAC;EAC5B;AACF;AAACK,EAAA,CAHQD,UAAU;EAAA,QACJJ,aAAa;AAAA;AAAAO,EAAA,GADnBH,UAAU;AAKnB,eAAeA,UAAU;AAEzB,eAAeI,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA,OAAOV,IAAI,CAAC;MAAEW,OAAO,EAAE;IAAyB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACrE,CAAC,MAAM;IACL;IACA;IACA,OAAOJ,QAAQ,CAAC,CAAC;EACnB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EAAE;EACzB,OAAOZ,KAAK,CAAC;IAAE;IACba,MAAM,EAAEP,UAAU,CAAC,CAAC,CAAE;EACxB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}