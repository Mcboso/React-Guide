{"ast":null,"code":"var _jsxFileName = \"/Users/seojuyeon/Desktop/React Guide/04-investment-calculator/src/Result/CalculatedList.js\";\nimport styles from \"./Result.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\nconst calculatedList = props => {\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n  const yearlyData = []; // per-year results\n\n  let currentSavings = +props.input[\"current-savings\"]; // feel free to change the shape of this input object!\n  const yearlyContribution = +props.input[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n  const expectedReturn = +props.input[\"expected-return\"] / 100;\n  const duration = +props.input[\"duration\"];\n  let interestSum = 0;\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    interestSum += yearlyInterest;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      totalSavings: currentSavings,\n      yearlyInterest: yearlyInterest,\n      totalInterest: interestSum,\n      investedCapital: currentSavings - interestSum\n    });\n  }\n  console.log(yearlyData);\n\n  // do something with yearlyData ...\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"result\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Total Savings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Interest (Year)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Total Interest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Invested Capital\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: yearlyData.map(year => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: year.year\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", formatter.format(year.totalSavings)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", formatter.format(year.yearlyInterest)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", formatter.format(year.totalInterest)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", formatter.format(year.investedCapital)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this)]\n        }, year.year, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\nexport default calculatedList;","map":{"version":3,"names":["styles","jsxDEV","_jsxDEV","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","calculatedList","props","yearlyData","currentSavings","input","yearlyContribution","expectedReturn","duration","interestSum","i","yearlyInterest","push","year","totalSavings","totalInterest","investedCapital","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","format"],"sources":["/Users/seojuyeon/Desktop/React Guide/04-investment-calculator/src/Result/CalculatedList.js"],"sourcesContent":["import styles from \"./Result.module.css\";\n\nconst formatter = new\n Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nconst calculatedList = (props) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +props.input[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +props.input[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +props.input[\"expected-return\"] / 100;\n    const duration = +props.input[\"duration\"];\n\n    let interestSum = 0;\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n        const yearlyInterest = currentSavings * expectedReturn;\n        currentSavings += yearlyInterest + yearlyContribution;\n        interestSum += yearlyInterest;\n\n        yearlyData.push({\n            // feel free to change the shape of the data pushed to the array!\n            year: i + 1,\n            totalSavings: currentSavings,\n            yearlyInterest: yearlyInterest,\n            totalInterest: interestSum,\n            investedCapital: currentSavings - interestSum,\n        });\n    }\n\n    console.log(yearlyData);\n\n    // do something with yearlyData ...\n    return (\n        <table className=\"result\">\n            <thead>\n                <tr>\n                    <th>Year</th>\n                    <th>Total Savings</th>\n                    <th>Interest (Year)</th>\n                    <th>Total Interest</th>\n                    <th>Invested Capital</th>\n                </tr>\n            </thead>\n            <tbody>\n                {yearlyData.map((year) => {\n                    return (\n                        <tr key={year.year}>\n                            <td>{year.year}</td>\n                            <td>\n                                ${formatter.format(year.totalSavings)}\n                            </td>\n                            <td>\n                                ${formatter.format(year.yearlyInterest)}\n                            </td>\n                            <td>\n                                ${formatter.format(year.totalInterest)}\n                            </td>\n                            <td>\n                                ${formatter.format(year.investedCapital)}\n                            </td>\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n};\n\nexport default calculatedList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}