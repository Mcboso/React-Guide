{"ast":null,"code":"var _jsxFileName = \"/Users/seojuyeon/Desktop/React Guide/13-user-experience/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const nameInputRef = useRef(\"\"); // 값 변화할 때마다 state 변경 필요 없을 때\n  const [enteredValueIsValid, setEnteredValueIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n    if (event.target.value.trim() !== '') {\n      setEnteredValueIsValid(true);\n    }\n  };\n  const nameInputIsInvalid = enteredNameTouched && !enteredValueIsValid; // 실제로 입력이 잘못 된 경우 (최초 제외)\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n    if (enteredName.trim().length === 0) {\n      setEnteredValueIsValid(false);\n    }\n    // else {\n    //   setEnteredValueIsValid(true);\n    // }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    if (enteredName.trim().length === 0) {\n      setEnteredValueIsValid(false);\n      return;\n    }\n    setEnteredValueIsValid(true);\n\n    // nameInputRef.current.value = ''; //js 코드로 dom 조작하는 것은 지양\n    setEnteredName(\"\"); // 입력된 값 초기화 하고 싶을 때는 state\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `form-control ${nameInputIsInvalid ? \"invalid\" : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        ref: nameInputRef,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"gsYDh8GswzNYJ+nD7DfYR8WzXWg=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","SimpleInput","props","_s","enteredName","setEnteredName","nameInputRef","enteredValueIsValid","setEnteredValueIsValid","enteredNameTouched","setEnteredNameTouched","nameInputChangeHandler","event","target","value","trim","nameInputIsInvalid","nameInputBlurHandler","length","formSubmissionHandler","preventDefault","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","onBlur","ref","_c","$RefreshReg$"],"sources":["/Users/seojuyeon/Desktop/React Guide/13-user-experience/src/components/SimpleInput.js"],"sourcesContent":["import { useState, useRef } from \"react\";\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  const nameInputRef = useRef(\"\"); // 값 변화할 때마다 state 변경 필요 없을 때\n  const [enteredValueIsValid, setEnteredValueIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n    if(event.target.value.trim() !== '') {\n      setEnteredValueIsValid(true);\n    }\n  };\n\n  const nameInputIsInvalid = enteredNameTouched && !enteredValueIsValid; // 실제로 입력이 잘못 된 경우 (최초 제외)\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n    if(enteredName.trim().length === 0) {\n      setEnteredValueIsValid(false);\n    } \n    // else {\n    //   setEnteredValueIsValid(true);\n    // }\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    if(enteredName.trim().length === 0) {\n      setEnteredValueIsValid(false);\n      return;\n    }\n    setEnteredValueIsValid(true);\n\n\n\n    // nameInputRef.current.value = ''; //js 코드로 dom 조작하는 것은 지양\n    setEnteredName(\"\"); // 입력된 값 초기화 하고 싶을 때는 state\n  };\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={`form-control ${nameInputIsInvalid ? \"invalid\" : ''}`}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          ref={nameInputRef}\n          value={enteredName} \n        />\n        {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty.</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}